import api from "../configs/axios";

// üß™ D·ªØ li·ªáu m·∫´u n·∫øu API fail ho·∫∑c thi·∫øu
const mockNotifications = [
  {
    notificationId: -1,
    content: "Welcome to the quit smoking program!",
    notificationType: "WELCOME",
    sendDate: "2025-07-19T10:00:00Z",
    status: "SENT",
    userId: 1
  },
  {
    notificationId: -2,
    content: "Remember to check your quit plan today!",
    notificationType: "REMINDER",
    sendDate: "2025-07-22T09:00:00Z",
    status: "SENT",
    userId: 1
  }
];

/**
 * üì• L·∫•y danh s√°ch th√¥ng b√°o ng∆∞·ªùi d√πng
 */
export const fetchUserNotifications = async () => {
  try {
    const response = await api.get("/notifications/me");
    const realData = response.data || [];

    // L·∫•y danh s√°ch mock ƒë√£ b·ªã x√≥a d·ª±a theo content
    const deletedMockContents = JSON.parse(localStorage.getItem("deletedMockContents") || "[]");

    const missingMock = mockNotifications.filter(
      (mock) =>
        !realData.some((real) => real.content === mock.content) &&
        !deletedMockContents.includes(mock.content)
    );

    return [...realData, ...missingMock];
  } catch (error) {
    console.error("API failed. Using mock notifications", error);
    return mockNotifications;
  }
};

/**
 * ‚úÖ ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
 */
export const markNotificationAsRead = async (notificationId) => {
  try {
    await api.put(`/notifications/${notificationId}/read`);
    return true;
  } catch (error) {
    console.error("Error marking notification as read", error);
    return false;
  }
};

/**
 * üóëÔ∏è X√≥a th√¥ng b√°o
 */
export const deleteNotification = async (notificationId, notificationContent) => {
  try {
    if (notificationId < 0) {
      // X·ª≠ l√Ω mock: l∆∞u content b·ªã x√≥a
      const deleted = JSON.parse(localStorage.getItem("deletedMockContents") || "[]");
      const updated = [...new Set([...deleted, notificationContent])];
      localStorage.setItem("deletedMockContents", JSON.stringify(updated));
      return true;
    }

    await api.delete(`/notifications/${notificationId}`);
    return true;
  } catch (error) {
    console.error("Error deleting notification", error);
    return false;
  }
};

/**
 * ‚ûï T·∫°o m·ªôt th√¥ng b√°o m·ªõi
 */
export const createNewNotification = async (notificationData) => {
  try {
    const response = await api.post("notifications", {
      ...notificationData,
      status: "SENT"  // ƒê·ªìng b·ªô v·ªõi enum m·ªõi
    });
    return response.data;
  } catch (error) {
    console.error("Error creating notification", error);
    return null;
  }
};
